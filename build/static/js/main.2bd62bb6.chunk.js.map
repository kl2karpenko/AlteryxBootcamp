{"version":3,"sources":["Table.js","data/mocks.js","App.js","serviceWorker.js","index.js"],"names":["TableOfWines","state","order","orderBy","selected","page","rowsPerPage","handleSelectAllClick","event","target","checked","_this","setState","props","data","map","n","i","handleClick","index","selectedIndex","indexOf","newSelected","concat","slice","length","isSelected","id","onGetWine","alert","_this2","this","_this$props","classes","_this$props$names","names","renderData","rowCount","numSelected","react_default","a","createElement","Paper_default","elevation","className","paperNext","Grid_default","container","item","xs","direction","justify","alignItems","Button_default","variant","color","onClick","button","disabled","Table_default","table","aria-labelledby","TableHead_default","TableRow_default","TableCell_default","padding","align","Checkbox_default","indeterminate","onChange","row","key","tableRowNameBig","tableRowName","TableBody_default","_ref","description","designation","points","price","province","hover","role","aria-checked","tabIndex","root","tableCell","tableCellFirst","tableCellBig","Component","FOODS_TYPES_SELECT","value","toLowerCase","name","PRICES_TYPES_SELECT","App","restaurant","food","loading","selectedPrice","selectedFood","start","Math","floor","random","end","timer","handleChange","Object","defineProperty","updateWines","clearTimeout","setTimeout","_this$props$classes","_this$state","chosen","Typography_default","component","h1","h4","paper","spacing","InputLabel_default","label","htmlFor","FormControl_default","formControl","Select_default","select","input","OutlinedInput_default","labelWidth","MenuItem_default","_ref2","react","h4Next","src_Table","LinearProgress_default","style","width","withStyles","theme","console","log","minHeight","display","flexWrap","unit","height","paddingBottom","marginBottom","minWidth","selectEmpty","marginTop","textAlign","palette","common","white","fontSize","primary","dark","fontWeight","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bd62bb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass TableOfWines extends Component {\r\n  state = {\r\n    order: 'asc',\r\n    orderBy: 'calories',\r\n    selected: [],\r\n    page: 0,\r\n    rowsPerPage: 5,\r\n  };\r\n\r\n  handleSelectAllClick = event => {\r\n    if (event.target.checked) {\r\n      this.setState(state => ({ selected: this.props.data.map((n, i) => i) }));\r\n      return;\r\n    }\r\n    this.setState({ selected: [] });\r\n  };\r\n\r\n  handleClick = (event, index) => {\r\n    const { selected } = this.state;\r\n    const selectedIndex = selected.indexOf(index);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, index);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    this.setState({ selected: newSelected });\r\n  };\r\n\r\n  isSelected = id => this.state.selected.indexOf(id) !== -1;\r\n\r\n  onGetWine = () => {\r\n    alert('Will e in 2 minutes! Have a good day!)')\r\n  };\r\n\r\n  render () {\r\n    const { data, classes, names = [ 'Name', 'Points', 'Price $', 'Province', 'Description' ] } = this.props;\r\n    const { selected } = this.state;\r\n\r\n    let renderData = data;\r\n    let rowCount = data.length;\r\n    let numSelected = selected.length;\r\n\r\n    return (\r\n      <Paper elevation={1} className={classes.paperNext}>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-end\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Button variant=\"outlined\" color=\"primary\" onClick={this.onGetWine} className={classes.button} disabled={!numSelected}>\r\n                Get this wine right now!)\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Table className={classes.table} aria-labelledby=\"tableTitle\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"checkbox\"\r\n                         align={'center'} >\r\n                <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={numSelected === rowCount}\r\n                  onChange={this.handleSelectAllClick}\r\n                />\r\n              </TableCell>\r\n              {names.map((row, i) => {\r\n                return (\r\n                  <TableCell\r\n                    key={row}\r\n                    className={i === names.length - 1 ? classes.tableRowNameBig : classes.tableRowName}\r\n                    align={'center'}\r\n                    padding={'none'}\r\n                  >\r\n                    {row}\r\n                  </TableCell>\r\n                );\r\n              }, this)}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {renderData.map(({ description, designation, points, price, province }, index) => {\r\n              const isSelected = this.isSelected(index);\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  onClick={event => this.handleClick(event, index)}\r\n                  role=\"checkbox\"\r\n                  aria-checked={isSelected}\r\n                  tabIndex={-1}\r\n                  key={designation}\r\n                  selected={isSelected}\r\n                >\r\n                  <TableCell\r\n                    classes={{ root: classes.tableCell }} padding=\"checkbox\">\r\n                    <Checkbox checked={isSelected} />\r\n                  </TableCell>\r\n                  <TableCell\r\n                    classes={{ root: classes.tableCellFirst }} align=\"center\">{designation}</TableCell>\r\n                  <TableCell\r\n                    classes={{ root: classes.tableCell }} align=\"center\">{points}</TableCell>\r\n                  <TableCell\r\n                    classes={{ root: classes.tableCell }} align=\"center\">{price}</TableCell>\r\n                  <TableCell\r\n                    classes={{ root: classes.tableCell }} align=\"center\">{province}</TableCell>\r\n                  <TableCell\r\n                    classes={{ root: classes.tableCellBig }} align=\"center\">{description}</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TableOfWines;","export const FOODS = ['American', 'Asian', 'Burgers', 'Candy','Chinese', 'Desserts', 'French', 'Italian', 'Japanese', 'Mediterranean' ];\r\nexport const PRICES = ['10-30$', '31-50$', '51-100$', '101-150$' ];\r\nexport const RESTAURANTS = ['Anjappar Chettinad Restaurant', 'ApplebeeS', 'Arab Udupi',\r\n  'Azzip Pizza','Bahama Breeze', 'Baja Fresh', 'Barbeque Nation', 'Big Boy', 'Black Angus Steakhouse', 'Blaze Pizza', 'Anjappar Chettinad Restaurant', 'ApplebeeS', 'Arab Udupi',\r\n  'Azzip Pizza','Bahama Breeze', 'Baja Fresh', 'Barbeque Nation', 'Big Boy', 'Black Angus Steakhouse', 'Blaze Pizza' ];\r\n\r\nexport const FOODS_TYPES_SELECT = FOODS.map(item => ({ value: item.toLowerCase(), name: item  }));\r\nexport const RESTAURANTS_TYPES_SELECT = RESTAURANTS.map(item => ({ value: item.toLowerCase(), name: item  }));\r\nexport const PRICES_TYPES_SELECT = PRICES.map(item => ({ value: item.toLowerCase(), name: item  }));\r\n","import React, { Component, Fragment } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport TableOfWines from './Table';\n\nimport './App.css';\n\nimport { FOODS_TYPES_SELECT, PRICES_TYPES_SELECT } from './data/mocks';\nimport data from './data/wines.json';\n\nconst styles = theme => {\n  console.log(theme);\n  return {\n    root: {\n      minHeight: '100vh',\n      // background: theme.palette.primary.light,\n      display: 'flex',\n      flexWrap: 'wrap',\n      padding: theme.spacing.unit * 4\n    },\n    paper: {\n      width: '100%',\n      padding: theme.spacing.unit * 4,\n      height: '172px',\n      paddingBottom: '0'\n    },\n    paperNext: {\n      width: '100%',\n      padding: theme.spacing.unit * 4,\n      paddingBottom: '0'\n    },\n    label: {\n      marginBottom: theme.spacing.unit * 2,\n      display: 'block'\n    },\n    formControl: {\n      minWidth: 120,\n      width: '100%'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing.unit * 2,\n    },\n    button: {\n      marginTop: theme.spacing.unit * 2,\n      marginBottom: theme.spacing.unit * 2\n    },\n    h1: { textAlign: 'center !important', width: '100%', marginBottom: theme.spacing.unit * 5, color: theme.palette.common.white },\n    h4: { marginBottom: theme.spacing.unit * 3, width: '100%', color: theme.palette.common.white },\n    h4Next: { marginTop: theme.spacing.unit * 5, marginBottom: theme.spacing.unit * 5, width: '100%', color: theme.palette.common.white },\n    table: {\n      marginTop: theme.spacing.unit\n    },\n    tableRowName: {\n      // color: '#fff',\n      fontSize: 15\n    },\n    tableRowNameBig: {\n      // color: '#fff',\n      fontSize: 15,\n      minWidth: '60%',\n      width: '60%',\n    },\n    tableCell: {\n      color: theme.palette.primary.dark,\n      fontSize: 15,\n      padding: theme.spacing.unit * 4\n    },\n    tableCellFirst: {\n      color: theme.palette.primary.dark,\n      fontSize: 15,\n      fontWeight: 'bold',\n      padding: theme.spacing.unit * 4\n    },\n    tableCellBig: {\n      color: theme.palette.primary.dark,\n      fontSize: 15,\n      minWidth: '60%',\n      width: '60%',\n      paddingTop: '20px !important',\n      paddingBottom: '20px !important',\n    }\n  }\n};\n\n\nclass App extends Component {\n  state = {\n    price: [],\n    restaurant: [],\n    food: [],\n    loading: false,\n    selectedPrice: 'none',\n    selectedFood: 'none',\n    start: Math.floor(Math.random() * 10) + 1,\n    end: Math.floor(Math.random() * 20) + 10,\n    data: []\n  };\n\n  timer = null;\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  updateWines = () => {\n    this.setState({\n      data\n    });\n\n    this.setState({\n        start: Math.floor(Math.random() * 10) + 1,\n        end: Math.floor(Math.random() * 20) + 10\n      }\n    )\n  };\n\n  onClick = () => {\n    if (!this.state.selectedPrice || !this.state.selectedFood) return;\n\n    this.setState({\n      loading: true\n    });\n\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n      this.updateWines();\n    }, 3000);\n  };\n\n  render() {\n    const { classes = {} } = this.props;\n    const {\n      selectedPrice,\n      selectedFood,\n      start,\n      end,\n      loading,\n      data\n    } = this.state;\n    const chosen = selectedPrice  !== 'none' && selectedFood !== 'none';\n\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h1\" component={'div'} align=\"center\" className={classes.h1}>\n          Welcome to our restaurant!\n        </Typography>\n        <Typography variant=\"h6\" align=\"center\" className={classes.h4}>\n          Welcome to ours best wine's preposition site!\n          You can choose a prices range and food types, and we will propose you the best wines that you have ever tasted\n        </Typography>\n        <Paper elevation={1} className={classes.paper}>\n          <Grid container spacing={8}>\n            <Grid item xs={6}>\n              <InputLabel\n                classes={{ root: classes.label }}\n                htmlFor=\"selectedPrice\">\n                Choose the price range\n              </InputLabel>\n              <FormControl variant=\"outlined\" className={classes.formControl}>\n                <Select\n                  classes={{\n                    root: classes.select\n                  }}\n                  value={selectedPrice}\n                  onChange={this.handleChange}\n                  input={\n                    <OutlinedInput\n                      labelWidth={0}\n                      name=\"selectedPrice\"\n                      id=\"selectedPrice\"\n                    />\n                  }\n                >\n                  <MenuItem key={'none'} value={'none'}>Select one</MenuItem>\n                  {PRICES_TYPES_SELECT.map(({ name, value }) => <MenuItem key={value} value={value}>{name}</MenuItem>)}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n              <InputLabel\n                classes={{ root: classes.label }} htmlFor=\"selectedFood\">Choose the food type</InputLabel>\n              <FormControl variant=\"outlined\" className={classes.formControl}>\n                <Select\n                  classes={{\n                    root: classes.select\n                  }}\n                  value={selectedFood}\n                  onChange={this.handleChange}\n                  input={\n                    <OutlinedInput\n                      labelWidth={0}\n                      name=\"selectedFood\"\n                      id=\"selectedFood\"\n                    />\n                  }\n                >\n                  <MenuItem key={'none'} value={'none'}>Select one</MenuItem>\n                  {FOODS_TYPES_SELECT.map(({ name, value }) => <MenuItem key={value} value={value}>{name}</MenuItem>)}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-end\"\n                alignItems=\"center\"\n              >\n                <Button variant=\"outlined\" color=\"primary\" component=\"span\" onClick={this.onClick} className={classes.button} disabled={loading}>\n                  Find my best Wine for these types of data!\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        {chosen && data.length ? <Fragment>\n          <Typography variant=\"h4\" component={'div'} align=\"center\" className={classes.h4Next}>\n            Hey! We've got a great Wine's set for you! <br/>\n            Choose what you want! =)\n          </Typography>\n          <TableOfWines data={data.slice(start, end)} classes={classes} />\n        </Fragment> : (loading ? <LinearProgress color=\"primary\"  style={{ width: '100%' }}/> : '')}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}